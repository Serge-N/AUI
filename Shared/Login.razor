@layout LoginLayerout
@page "/login"

@using AUI.Services
@using System.Diagnostics
@inject IAuthService authService
@inject NavigationManager Navigation



<div class="row-fluid">
    <div class="d-flex justify-content-center align-items-center">
        <div class="lower-shadow">
            <img style="height: 20em;" class="w-100" src="/media/logo/logo.png" alt="company logo">
            <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
                <DataAnnotationsValidator />


                <div class="form-group w-100">
                    <InputText Id="email" type="email" placeholder="Enter email" Class="form-control upper-shadow" @bind-Value="@loginModel.Email" />
                    <ValidationMessage For="@(() => loginModel.Email)" />
                </div>

                <div class="form-group w-100">
                    <InputText Id="password" type="password" placeholder="Password" Class="form-control upper-shadow" @bind-Value="@loginModel.Password" />
                    <ValidationMessage For="@(() => loginModel.Password)" />
                </div>

                <div class="form-check">
                    <InputCheckbox Id="remember" type="checkbox" Class="form-check-input" @bind-Value="@loginModel.RememberMe" />
                    <label class="form-check-label mr-2" for="remember">Remember Me</label>
                    <ValidationMessage For="@(() => loginModel.RememberMe)" />
                </div>

                <button type="submit" class="btn btn-primary my-2">Submit</button>
            </EditForm>
            @if (ShowErrors)
            {
                <div class="alert alert-danger" role="alert">
                    <p>@Error</p>
                </div>
            }
        </div>
    </div>
</div>

@code {

    private LoginModel loginModel = new LoginModel();
    private bool ShowErrors;
    private string Error = "";

    private async Task HandleLogin()
    {
        ShowErrors = false;
        

        var result = await authService.Login(loginModel);

        if (result.Successful)
        {
            Navigation.NavigateTo("/");
        }
        else if (result != null)
        {
            Error = result.Error;
            ShowErrors = true;
        }
    }

}
