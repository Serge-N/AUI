@using Tewr.Blazor.FileReader;
@inject IJSRuntime JsRuntime;
@inject HttpClient Http
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IFileReaderService fileReaderService;

@if (FileNames != null)
{
    <div id="FarmShowCase" class="carousel slide pb-1" data-ride="carousel">
        <ol class="carousel-indicators">
            @foreach (var image in FileNames)
            {
                string Class = "";
                if (FileNames.IndexOf(image) == 0)
                {
                    Class = "active";
                }
                <li data-target="#FarmShowCase" data-slide-to="@FileNames.IndexOf(image)" class="@Class"></li>

            }
        </ol>
        <div class="carousel-inner">

            @foreach (var image in FileNames)
            {
                string Class = "";
                if (FileNames.IndexOf(image) == 0)
                {
                    Class = "active";
                }
                <div class="carousel-item  @Class"role="listbox" style=" width:100%; height: @pixels !important; position: relative">
                    <img class="d-block img-fluid mx-auto" style="object-fit: cover; width: 100%; height: 100%;" src=@(BaseUrl+image) alt=@image>
                    <div class="carousel-caption  d-block">
                        <h4>@System.IO.Path.GetFileNameWithoutExtension(image)</h4>
                    </div>
                </div>
            }
        </div>

        <a id="FarmShowCase-Prev"
           class="carousel-control-prev" role="button" data-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="sr-only">Previous</span>
        </a>

        <a id="FarmShowCase-Next"
           class="carousel-control-next" role="button" data-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="sr-only">Next</span>
        </a>
    </div>
}

@code {
    [Parameter]
    public string Focus { get; set; }
    [Parameter]
    public string Mode { get; set; }
    [Parameter]
    public string FormType { get; set; }
    [Parameter]
    public string AnimalType { get; set; }
    [Parameter]
    public long AnimalID { get; set; }

    List<string> FileNames = new List<string>() { };
    bool FarmStatus;
    string pixels;
    string BaseUrl { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeAsync<object>("FireCarousel");
            firstRender = false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        FarmStatus = await localStorage.GetItemAsync<bool>("FarmStatus");

        if (FarmStatus)
        {
            if (Focus == "Farms")
            {

                var FarmId = await localStorage.GetItemAsync<string>("FarmID");

                //Case 2: Farm images => Focus[farms]-[Id]-[Title]-FormType[farm]
                if (FormType == "Farm")
                {

                    string url = $"api/media/farms/{FarmId}/farm";

                    FileNames = await Http.GetFromJsonAsync<List<string>>(url);

                    BaseUrl = $"{Http.BaseAddress}/media/farms/{FarmId}/farm/";

                    pixels = "520px";
                }

                else if (FormType == "Animals")
                {

                    //Case 3: Group animal images => Focus[farms]-[Id]-[Title]-FormType[animals]-AnimalType[Cattle]-Mode[Many]
                    if (Mode == "Many")
                    {

                        string url = $"api/media/farms/{FarmId}/animals/{AnimalType}/many";

                        FileNames = await Http.GetFromJsonAsync<List<string>>(url);

                        BaseUrl = $"{Http.BaseAddress}/media/farms/{FarmId}/animals/{AnimalType}/Kraal/";
                        pixels = "400px";

                    }
                    else if (Mode == "Single")
                    {
                        //Case 4: Single animal images => Focus[farms]-[Id]-[Title]-FormType[animals]-AnimalType[Cattle]-Mode[Single]-[AnimalID]-


                        string url = $"api/media/farms/{FarmId}/animals/{AnimalType}/single/{AnimalID}";

                        FileNames = await Http.GetFromJsonAsync<List<string>>(url);

                        BaseUrl = $"{Http.BaseAddress}/media/farms/{FarmId}/animals/{AnimalType}/ids/{AnimalID}/";
                        pixels = "600px";

                    }
                }

            }
        }
    }
}
